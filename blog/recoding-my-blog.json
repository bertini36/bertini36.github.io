{"title":"Recoding my blog","slug":"recoding-my-blog","tags":["#svelte","#sapper","#serverless","#python","#javascript"],"date":"2020-07-12","html":"\n\t\t<p class=\"post_p\">\nDuring quarantine I had more free time than usual so I decided it was time\nto modernize my <a href=\"https://albertopou.dev/\" class=\"post_link\" target=\"_blank\">blog</a>.\nI coded the first version 5 years ago choosing technologies\nsimply because I knew them. That resulted in a <a href=\"https://www.djangoproject.com/\" class=\"post_link\" target=\"_blank\">Django</a>\n app with a <a href=\"https://www.postgresql.org/\" class=\"post_link\" target=\"_blank\">Postgres</a> database \n and an outdated design using <a href=\"https://getbootstrap.com/\" class=\"post_link\" target=\"_blank\">Bootstrap</a>.  \n\t\t</p>\n\t\t<p class=\"post_p\">\nAfter the years I used to use my blog to test new technologies so I had versions \nof my blog using <a href=\"https://jquery.com/\" class=\"post_link\" target=\"_blank\">JQuery</a>,\n<a href=\"https://vuejs.org/\" class=\"post_link\" target=\"_blank\">Vue</a>, Django, Django 2.0 \nusing a DDD approach, ... and it was deployed on <a href=\"https://www.digitalocean.com/\" class=\"post_link\" target=\"_blank\">Digital Ocean</a>,\n<a href=\"https://aws.amazon.com/\" class=\"post_link\" target=\"_blank\">AWS</a>,\n<a href=\"https://www.heroku.com/\" class=\"post_link\" target=\"_blank\">Heroku</a>, \nHeroku using <a href=\"https://www.terraform.io/\" class=\"post_link\" target=\"_blank\">Terraform</a>, ... \nAnyone who saw the code could say that a blog should never be so over-engineer, and I agree. For this \nreason I decided to check which technologies were being used nowadays to make simple blogs.  \n\t\t</p>\n\t\t<p class=\"post_p\">\nMy goal was to make a simple, fast and modern blog which allows me to write posts easily, \ndeploy them on <a href=\"https://pages.github.com/\" class=\"post_link\" target=\"_blank\">Github Pages</a> \nand, of course, spend as little time as possible on maintenance. After check several technologies \na co-worker told me about <a href=\"https://svelte.dev/\" class=\"post_link\" target=\"_blank\">Svelte</a>\nand I loved it. Svelte and its server-rendering backend <a href=\"https://sapper.svelte.dev/\" class=\"post_link\" target=\"_blank\">Sapper</a>\nwere what I was looking for and there were a lot of examples of blogs made with these technologies.  \n\t\t</p>\n\t\t<p class=\"post_p\">\nAfter that I just required a new design. I was tired about Bootstrap designs so I was looking \nfor something new, and then I found <a href=\"https://tailwindcss.com/\" class=\"post_link\" target=\"_blank\">Tailwind</a>. \nTailwind had all that I needed. A framework which, after memorize some easy classes, allows you not to write CSS. Maybe for \nyou this is not a plus feature but for me, a backend coder, it was perfect. \n\t\t</p>\n\t\t<h4 class=\"post_section_title text-2xl text-bold\">The good parts of this architecture</h4>\n\t\t<p class=\"post_p\">\nAfter this introduction I wanted to list the advantages that I found designing my \nblog with Svelte, Sapper and Tailwind. Remember that this benefits I found exist in \nthe case of study of a simple blog. \n\t\t</p>\n\t\t<ul class=\"post_list\">\n<li>\n\t<strong>Easy installation</strong>. Sapper has a great initial template and several pre-configured commands\n\twhich allows you to focus on the important parts of your project. \n</li>\n<li>\n\t<strong>Great development environment</strong>. Live reload! When you modify some file, the navigator\n\treloads the page automatically. Maybe I'm overestimating this feature but I work everyday in an outdated\n\tfrontend and this feature drove me crazy!\n</li>\n<li>\n\t<strong>Static page</strong>. Sapper avoids you to export your project as a static site. \n\tThen it can be hosted and served as static files, which allows it to be deployed on hosting\n\tenvironments such as Github Pages. To serve the page as static files also improves notoriously\n\tthe speed, obtaining better results in web positioning. You can use apps as \n\t<a href=\"https://developers.google.com/web/tools/lighthouse\" class=\"post_link\" target=\"_blank\">Lighthouse</a> to check this.\n</li>\n<li>\n\t<strong>Elegant syntax</strong>. I worked with different frontend technologies such as JQuery, \n\t<a href=\"https://knockoutjs.com/\" class=\"post_link\" target=\"_blank\">Knockout</a>, \n\t <a href=\"https://angular.io/\" class=\"post_link\" target=\"_blank\">Angular</a> or Vue \n\tand Svelte syntax looks perfect for me. It's easy to understand, simple and elegant. In the next section you'll \n\tbe able to check it in a easy example I'll show you.  \n</li>\n<li>\n\t<strong>Component structure</strong>. One thing normally I don't like in a frontend based project is \n\tthe way how developers structure the code. Last years I was working in projects where component HTML, Javascript and\n\tspecific CSS were in different folders and then developers loose to much time searching the \n\tJavascript or de CSS associated to a particular template. Svelte joins all in one file (.svelte) and\n\tin my opinion is a great solution to improve the components reusability.\n</li>\n<li>\n\t<strong>Speed</strong>. Svelte is based on reactivity. To understand easily which reasons \n\tallows Svelte to get such good results in terms of speed compared to other frameworks you can watch this \n\t<a href=\"https://www.youtube.com/watch?v=gJ2P6hGwcgo\" class=\"post_link\" target=\"_blank\">great conference</a>\n\tof its creator Rich Harris.\n</li>\n<li>\n\t<strong>No CSS</strong>. With Tailwind you don't need to write CSS code. With its pre-defined classes\n\tyou can make pretty much anything.\n</li>\n<li>\n\t<strong>Easy personalization</strong>. At Tailwind config file you can configure stuff as main \n\tcolors, default spacing, text font, ... and using @apply CSS sentence you can create your own classes easily.\n</li>\n<li>\n\t<strong>0 costs</strong>. With this architecture I was able to have my blog with 0 costs (I just have to pay the domain). Now I'm going to show\n\tyou how I made the comments engine using <a href=\"https://www.serverless.com/\" class=\"post_link\" target=\"_blank\">Serverless</a>,\n\t<a href=\"https://aws.amazon.com/dynamodb/\" class=\"post_link\" target=\"_blank\">AWS Dynamo DB</a> and\n\t<a href=\"https://aws.amazon.com/lambda/\" class=\"post_link\" target=\"_blank\">AWS lambda</a>.\n</li>\n\t\t</ul>\n\t\t<h4 class=\"post_section_title text-2xl text-bold\">Persistent storage for comments</h4>\n\t\t<p class=\"post_p\">\n\t\t\n\t\t</p>\n\t\t<h4 class=\"post_section_title text-2xl text-bold\">Github Pages deploy</h4>\n\t\t"}