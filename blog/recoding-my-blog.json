{"title":"Recoding my blog â›©","slug":"recoding-my-blog","tags":["#svelte","#sapper","#serverless","#python","#javascript"],"date":"2020-07-12","html":"\n<p class=\"post_p\">\n\tDuring quarantine I had more free time than usual so I decided it was time\n\tto modernize my <a href=\"https://albertopou.dev/\" class=\"post_link\" target=\"_blank\">blog</a>.\n\tI coded the first version 5 years ago choosing technologies\n\tsimply because I knew them. That resulted in a <a href=\"https://www.djangoproject.com/\" class=\"post_link\" target=\"_blank\">Django</a>\n\t app with a <a href=\"https://www.postgresql.org/\" class=\"post_link\" target=\"_blank\">Postgres</a> database\n\t and an outdated design using <a href=\"https://getbootstrap.com/\" class=\"post_link\" target=\"_blank\">Bootstrap</a>.\n\tAfter the years I used to use my blog to test new technologies so I had versions\n\tof my blog using <a href=\"https://jquery.com/\" class=\"post_link\" target=\"_blank\">JQuery</a>,\n\t<a href=\"https://vuejs.org/\" class=\"post_link\" target=\"_blank\">Vue</a>, Django, Django 2.0\n\tusing a DDD approach, ... and it was deployed on <a href=\"https://www.digitalocean.com/\" class=\"post_link\" target=\"_blank\">Digital Ocean</a>,\n\t<a href=\"https://aws.amazon.com/\" class=\"post_link\" target=\"_blank\">AWS</a>,\n\t<a href=\"https://www.heroku.com/\" class=\"post_link\" target=\"_blank\">Heroku</a>,\n\tHeroku using <a href=\"https://www.terraform.io/\" class=\"post_link\" target=\"_blank\">Terraform</a>, ...\n\tAnyone who saw the code could say that a blog should never be so over-engineer, and I agree. For this\n\treason I decided to check which technologies were being used nowadays to make simple blogs.\n</p>\n<p class=\"post_p\">\n\tMy goal was to make a simple, fast and modern blog which allows me to write posts easily,\n\tdeploy them on <a href=\"https://pages.github.com/\" class=\"post_link\" target=\"_blank\">Github Pages</a>\n\tand, of course, spend as little time as possible on maintenance. After check several technologies\n\ta co-worker told me about <a href=\"https://svelte.dev/\" class=\"post_link\" target=\"_blank\">Svelte</a>\n\tand I loved it. Svelte and its server-rendering backend <a href=\"https://sapper.svelte.dev/\" class=\"post_link\" target=\"_blank\">Sapper</a>\n\twere what I was looking for and there were a lot of examples of blogs made with these technologies.\n\tAfter that I just required a new design. I was tired about Bootstrap designs so I was looking\n\tfor something new, and then I found <a href=\"https://tailwindcss.com/\" class=\"post_link\" target=\"_blank\">Tailwind</a>.\n\tTailwind had all that I needed. A framework which, after memorize some easy classes, allows you not to write CSS. Maybe for\n\tyou this is not a plus feature but for me, a backend coder, it was perfect.\n</p>\n<h4>The good parts of this architecture</h4>\n<p class=\"post_p\">\n\tAfter this introduction I want to list the advantages that I found making my\n\tblog with Svelte, Sapper and Tailwind. Remember that this benefits I found exist in\n\tthe case of study of a simple blog.\n</p>\n<ul class=\"post_list\">\n\t<li>\n\t\t<strong>Easy installation</strong>. Sapper has a great initial template and several pre-configured commands\n\t\twhich allows you to focus on the important parts of your project.\n\t</li>\n\t<li>\n\t\t<strong>Great development environment</strong>. Live reload! When you modify some file, the navigator\n\t\treloads the page automatically. Maybe I'm overestimating this feature but I work everyday in an outdated\n\t\tfrontend and this feature drove me crazy!\n\t</li>\n\t<li>\n\t\t<strong>Static page</strong>. Sapper allows you to export your project as a static site.\n\t\tThen it can be hosted and served as static files, which allows it to be deployed on hosting\n\t\tenvironments such as Github Pages. To serve the page as static files also improves\n\t\tthe speed notoriously, obtaining better results in web positioning. You can use apps as\n\t\t<a href=\"https://developers.google.com/web/tools/lighthouse\" class=\"post_link\" target=\"_blank\">Lighthouse</a> to check this.\n\t</li>\n\t<li>\n\t\t<strong>Elegant syntax</strong>. I worked with different frontend technologies such as JQuery,\n\t\t<a href=\"https://knockoutjs.com/\" class=\"post_link\" target=\"_blank\">Knockout</a>,\n\t\t <a href=\"https://angular.io/\" class=\"post_link\" target=\"_blank\">Angular</a> or Vue\n\t\tand Svelte syntax looks perfect for me. It's easy to understand, simple and elegant. In the following section you'll\n\t\tbe able to check it in a easy example I'll show you.\n\t</li>\n\t<li>\n\t\t<strong>Component structure</strong>. One thing normally I don't like in a frontend based project is\n\t\tthe way how developers structure the code. Last years I was working in projects where component HTML, Javascript and\n\t\tspecific CSS were in different folders and then developers loose to much time searching the\n\t\tJavascript or de CSS associated to a particular template. Svelte joins all in one file (.svelte) and\n\t\tin my opinion is a great solution to improve the components reusability.\n\t</li>\n\t<li>\n\t\t<strong>Speed</strong>. Svelte is based on reactivity. To understand easily which reasons\n\t\tallows Svelte to get such good results in terms of speed compared to other frameworks you can watch this\n\t\t<a href=\"https://www.youtube.com/watch?v=gJ2P6hGwcgo\" class=\"post_link\" target=\"_blank\">great conference</a>\n\t\tof its creator Rich Harris.\n\t</li>\n\t<li>\n\t\t<strong>No CSS</strong>. With Tailwind you don't need to write CSS code. With its pre-defined classes\n\t\tyou can make pretty much anything.\n\t</li>\n\t<li>\n\t\t<strong>Easy personalization</strong>. At Tailwind config file you can configure stuff as main\n\t\tcolors, default spacing, text font, ... and using @apply CSS sentence you can create your own classes easily.\n\t</li>\n\t<li>\n\t\t<strong>0 costs</strong>. With this architecture I was able to have my blog with 0 costs (I just have to pay the domain).\n\t</li>\n</ul>\n<p class=\"post_p\">\n\tNow I'm going to show\n\tyou how I made the comments engine using <a href=\"https://www.serverless.com/\" class=\"post_link\" target=\"_blank\">Serverless</a>.\n</p>\n<h4>Comments engine</h4>\n<p class=\"post_p\">\n\tA comments engine requires a persistent storage so I needed to add something else to the blog in order to allow users to write comments.\n\tServerless is a framework that makes easier to mount a serverless infrastructure with AWS. In this case I decided\n\tto use <a href=\"https://aws.amazon.com/dynamodb/\" class=\"post_link\" target=\"_blank\">Dynamo DB</a>\n\tto store post user comments and <a href=\"https://aws.amazon.com/lambda/\" class=\"post_link\" target=\"_blank\">Lambda</a> to get and publish comments.\n\tThis functions are not all time waiting for requests in a server (for this reason is so cheap).\n\tAWS Lambda deploys them very fast just when they are invoked by different events such as queue events, S3 changes, HTTP requests, ....\n\tIn this case the event was going to\n\tbe an HTTP request to the <a href=\"https://aws.amazon.com/api-gateway/\" class=\"post_link\" target=\"_blank\">AWS API Gateway</a>.\n</p>\n<p class=\"post_p\">\n\tAll this could seem very complex but with a framework as Serverless is done with a simple config file.\n\t<a href=\"https://github.com/bertini36/comments-engine/blob/master/serverless.yml\" class=\"post_link\" target=\"_blank\">Here</a>\n\tyou have the config file I wrote to have 2 lambda functions (at 2 different endpoints), one for\n\tget post comments and another to publish new ones. At this config file you can configure several things, from\n\tlanguage used and access management till requests rate limits and database resources. In this case the configuration is very simple,\n\tthe 2 lambda functions are 2 views of a simple <a href=\"https://flask.palletsprojects.com/en/1.1.x/\" class=\"post_link\" target=\"_blank\">Flask</a> application.\n\t<a href=\"https://github.com/bertini36/comments-engine/blob/master/src/entrypoints/infrastructure/controllers.py\" class=\"post_link\" target=\"_blank\">\n\tThese controllers</a> just get the comments and stores a new one in the database (in this case Dynamo DB, you can check the databse repository\n\t<a href=\"https://github.com/bertini36/comments-engine/blob/master/src/modules/comments/infrastructure/repository/dynamo_comments_repository.py\" class=\"post_link\" target=\"_blank\">here</a>).\n</p>\n<p class=\"post_p\">\n\tCheck <a href=\"https://github.com/bertini36/comments-engine/blob/master/README.md\" class=\"post_link\" target=\"_blank\">comments engine README</a>\n\tin order to install this simple API and start using it and if you find some error please let me know!\n</p>\n<p class=\"post_p\">\n\tNow we need a Svelte component that gets the comments of a post and publish new ones using the endpoints created with Serverless. In the following\n\tcode you can revise the component part required to get and show the comments of a post (.svelte file).\n</p>\n<div class=\"post_code\">\n\t<pre><code>\n&lt;script&gt;\n   export let slug;\n   const comments_url = `dummy.com/prod/comments/${slug}`;\n   let comments = getComments();\n\n   async function getComments() {\n      const response = await fetch(comments_url);\n      if (!response.ok) throw new Error(text);\n      return await response.json();\n    }\n&lt;/script&gt;\n\n{#await comments}\n   &lt;figure class=\"flex justify-center\">&lt;img class=\"w-48\" src=\"loader.gif\" alt=\"Loader\"&gt;&lt;/figure&gt;\n{:then comments}\n   {#each comments as comment}\n      &lt;div class=\"shadow bg-white rounded-md mb-1\" role=\"alert\"&gt;\n         &lt;div class=\"p-4 flex\"&gt;\n            &lt;div class=\"pl-2\"&gt;\n               &lt;p class=\"font-bold text-gray-700\"&gt;{comment.text}&lt;/p&gt;\n               &lt;p class=\"text-gray-600\"&gt;\n                  {comment.name} &lt;span class=\"text-gray-500 text-sm\"&gt;{comment.date}&lt;/span&gt;\n                &lt;/p&gt;\n            &lt;/div&gt;\n         &lt;/div&gt;\n      &lt;/div&gt;\n   {/each}\n{:catch error}\n   &lt;p>No comments yet&lt;/p&gt;\n{/await}\n\t</code></pre>\n</div>\n<p class=\"post_p\">\n\tI'm using {#await} Svelte declarative to wait the fetch promise of the comments request. Svelte\n\tis going to manage the comments as soon as the promise ends and then comments will be rendered\n\tusing {#each} declarative. All classes used to give styles are Tailwind classes. If you want to see\n\tthe rest of the code to publish new comments\n\t<a href=\"https://github.com/bertini36/bertini36.github.io/blob/develop/src/components/Comments.svelte\" class=\"post_link\" target=\"_blank\">here</a>\n\tyou have the complete component and the result online is just below!\n</p>\n<p class=\"post_p\">\n\tFeel free to ask anything in the comments section!\n</p>\n\t\t"}