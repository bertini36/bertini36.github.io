!function(){"use strict";const e=["client/[slug].0dafcaf5.js","client/index.9f1b6421.js","client/client.4486b514.js","client/index.a7375228.js"].concat(["service-worker-index.html","automatic-differentiation/backward_AD.png","automatic-differentiation/derivative_deffinition.png","automatic-differentiation/derivative_strategies.png","automatic-differentiation/forward_AD.png","automatic-differentiation/linear_regression.png","automatic-differentiation/linear_regression_ag_results.png","automatic-differentiation/linear_regression_tf_results.png","black_logo.png","distributed-matrix-product/distributed_matrix_product.png","distributed-matrix-product/main.jpg","distributed-matrix-product/marenostrum.jpg","distributed-matrix-product/matrix_product.png","global.css","logo.png","manifest.json","profile.jpg","profiling-on-social-networks/profiler1.png","profiling-on-social-networks/profiler2.png","tailwind.css","variational-inference-1/bayes_rule.png","variational-inference-1/box_loop.png","variational-inference-1/entropy.png","variational-inference-1/global_local_variables.png","variational-inference-1/graphical_model.png","variational-inference-1/joint_dist.png","variational-inference-1/joint_dist2.png","variational-inference-1/kl1.png","variational-inference-1/kl_rule.png","variational-inference-1/kullback-leibler1.png","variational-inference-1/kullback-leibler2.png","variational-inference-1/mean_field.png","variational-inference-1/online_learning.png","variational-inference-1/plate.png","variational-inference-1/schema_situation.png","variational-inference-1/variational_inference.jpg"]),i=new Set(e);self.addEventListener("install",i=>{i.waitUntil(caches.open("cache1593710817470").then(i=>i.addAll(e)).then(()=>{self.skipWaiting()}))}),self.addEventListener("activate",e=>{e.waitUntil(caches.keys().then(async e=>{for(const i of e)"cache1593710817470"!==i&&await caches.delete(i);self.clients.claim()}))}),self.addEventListener("fetch",e=>{if("GET"!==e.request.method||e.request.headers.has("range"))return;const n=new URL(e.request.url);n.protocol.startsWith("http")&&(n.hostname===self.location.hostname&&n.port!==self.location.port||(n.host===self.location.host&&i.has(n.pathname)?e.respondWith(caches.match(e.request)):"only-if-cached"!==e.request.cache&&e.respondWith(caches.open("offline1593710817470").then(async i=>{try{const n=await fetch(e.request);return i.put(e.request,n.clone()),n}catch(n){const t=await i.match(e.request);if(t)return t;throw n}}))))})}();
